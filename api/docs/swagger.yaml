definitions:
  dashboard.BackgroundError:
    properties:
      message:
        description: Error message.
        type: string
      time:
        description: Time when the error occurred.
        type: string
    type: object
  dashboard.Configs:
    properties:
      dashboard:
        properties:
          columns:
            type: integer
        type: object
    type: object
  manga.Chapter:
    properties:
      chapter:
        description: Chapter usually is the chapter number, but in some cases it can
          be a one-shot or a special chapter
        type: string
      name:
        description: Name is the name of the chapter
        type: string
      type:
        type: integer
      updatedAt:
        description: |-
          UpdatedAt is the time when the chapter was released or updated (read).
          Should truncate at the second.
          The timezone should be the default/system timezone.
        type: string
      url:
        description: URL is the URL of the chapter
        type: string
    type: object
  manga.Manga:
    properties:
      coverImg:
        description: CoverImg is the cover image of the manga
        items:
          type: integer
        type: array
      coverImgFixed:
        description: |-
          CoverImgFixed is true if the cover image is fixed. If true, the cover image will not be updated when updating the manga metadata.
          It's used for when the cover image is manually set by the user.
        type: boolean
      coverImgResized:
        description: CoverImgResized is true if the cover image was resized
        type: boolean
      coverImgURL:
        description: CoverImgURL is the URL of the cover image
        type: string
      id:
        type: integer
      lastReadChapter:
        allOf:
        - $ref: '#/definitions/manga.Chapter'
        description: LastReadChapter is the last chapter read by the user
      lastReleasedChapter:
        allOf:
        - $ref: '#/definitions/manga.Chapter'
        description: LastReleasedChapter is the last chapter released by the source
      name:
        description: Name is the name of the manga
        type: string
      preferredGroup:
        description: |-
          PreferredGroup is the preferred group that translates (and more) the manga
          Not all sources have multiple groups
        type: string
      source:
        description: Source is the source of the manga, usually the domain of the
          website
        type: string
      status:
        type: integer
      url:
        description: URL is the URL of the manga
        type: string
    type: object
  routes.AddMangaRequest:
    properties:
      last_read_chapter:
        type: string
      last_read_chapter_url:
        type: string
      status:
        maximum: 5
        minimum: 0
        type: integer
      url:
        type: string
    required:
    - status
    - url
    type: object
  routes.UpdateMangaChapterRequest:
    properties:
      chapter:
        type: string
      chapter_url:
        type: string
    type: object
  routes.UpdateMangaStatusRequest:
    properties:
      status:
        maximum: 5
        minimum: 0
        type: integer
    required:
    - status
    type: object
  routes.responseMessage:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /dashboard/configs:
    get:
      description: Returns the dashboard configs read from the configs.json file.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.Configs'
      summary: Get the dashboard configs
  /dashboard/configs/columns:
    patch:
      description: Update the dashboard columns in the configs.json file.
      parameters:
      - description: New number of columns.
        example: 5
        in: query
        name: columns
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update dashboard columns
  /dashboard/last_background_error:
    delete:
      description: Deletes the last error that happened in the background. Usually
        used to clear the error in the dashboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Delete the last background error
    get:
      description: Returns the last error that happened in the background. Usually
        used to display the error in the dashboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.BackgroundError'
      summary: Get the last background error
  /dashboard/last_update:
    get:
      description: Returns the last time a resource that should trigger an update
        in the iframe/dashboard was updated. Usually used to update the dashboard
        when an event not triggered by the user occurs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Get the last update date
  /health:
    get:
      description: Returns status OK
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check route
  /manga:
    delete:
      description: Deletes a manga from the database. You must provide either the
        manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Delete manga
    get:
      description: Gets a manga from the database. You must provide either the manga
        ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"manga": mangaObj}'
          schema:
            $ref: '#/definitions/manga.Manga'
      summary: Get manga
    post:
      consumes:
      - application/json
      description: Gets a manga metadata from source and inserts in the database.
      parameters:
      - description: If true, assumes the manga has no chapters and sets the last
          released chapter to null without even checking if the manga really doesn't
          have released chapters. If false, gets the manga's last released chapter
          metadata from source. It doesn't do anything with the last read chapter.
          Defaults to false.
        example: true
        in: query
        name: manga_has_no_chapters
        type: boolean
      - description: Manga data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.AddMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add manga
  /manga/chapters:
    get:
      description: Get a manga chapters from the source. You must provide either the
        manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"chapters": [chapterObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.Chapter'
            type: array
      summary: Get manga chapters
  /manga/cover_img:
    patch:
      description: Updates a manga cover image in the database. You must provide either
        the manga ID or the manga URL. By default, the cover image is fetched from
        the source site, but you can manually provide an image URL or upload a file.
        If you want the application to fetch the cover image from the source site,
        leave the URL field empty and don't upload a file and set the get_cover_img_from_source
        field to true.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga cover image
        in: formData
        name: cover_img
        type: file
      - description: Manga cover image URL
        example: '"https://example.com/cover.jpg"'
        in: query
        name: cover_img_url
        type: string
      - description: Manga status
        example: true
        in: query
        name: get_cover_img_from_source
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update manga cover image
  /manga/last_read_chapter:
    patch:
      description: Updates a manga last read chapter in the database. If both `chapter`
        and `chapter_url` are empty strings in the body, set the last read chapter
        to the last released chapter in the database. You must provide either the
        manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update manga last read chapter
  /manga/status:
    patch:
      description: Updates a manga status in the database. You must provide either
        the manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update manga status
  /mangas:
    get:
      description: Gets all mangas from the database.
      produces:
      - application/json
      responses:
        "200":
          description: '{"mangas": [mangaObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.Manga'
            type: array
      summary: Get mangas
  /mangas/add_to_kaizoku:
    post:
      description: Add the mangas in the database to Kaizoku. If it fails to add a
        manga, it will continue with the next manga. This is a heavy operation depending
        on the number of mangas in the database.
      parameters:
      - collectionFormat: csv
        description: 'Filter which mangas to add by status. 1=reading, 2=completed,
          3=on hold, 4=dropped, 5=plan to read. Example: status=1,2,3,5'
        in: query
        items:
          type: integer
        name: status
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add mangas to Kaizoku
  /mangas/iframe:
    get:
      description: Returns an iFrame with mangas. Only mangas with unread chapters,
        and status reading or completed. Sort by last released chapter date. Designed
        to be used with [Homarr](https://github.com/ajnart/homarr).
      parameters:
      - description: API URL used by your browser. Used for the button that updates
          the last read chater, as your browser needs to send a request to the API
          to update the chapter.
        example: https://sub.domain.com
        in: query
        name: api_url
        required: true
        type: string
      - description: Homarr theme, defaults to light. If it's different from your
          Homarr theme, the background turns white
        example: light
        in: query
        name: theme
        type: string
      - description: Limits the number of items in the iFrame.
        example: 5
        in: query
        name: limit
        type: integer
      produces:
      - text/html
      responses:
        "200":
          description: HTML content
          schema:
            type: string
      summary: Mangas iFrame
  /mangas/metadata:
    patch:
      description: Get the mangas metadata from the sources and update them in the
        database.
      parameters:
      - description: Notify if a new chapter was released for the manga (only of mangas
          with status reading or completed).
        in: query
        name: notify
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update mangas metadata
swagger: "2.0"
